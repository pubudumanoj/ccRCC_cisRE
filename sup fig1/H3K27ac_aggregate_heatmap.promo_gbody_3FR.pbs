#!/bin/bash
#PBS -l nodes=1:ppn=4,pmem=10gb
#PBS -l walltime=5:30:00
#PBS -A czx-944-aa
#PBS -o chip.aggregate.norm.H3K27ac_out.txt
#PBS -e chip.aggregate.norm.H3K27ac_err.txt
#PBS -N chip_aggH3K27ac
#PBS -V
#PBS -t 3-8

echo "define varibales"
table="H3K27ac.bdg.table.txt"
rawnormfile=`cat $table | head -n $PBS_ARRAYID | tail -n 1 | cut -f1`
fName=`cat $table | head -n $PBS_ARRAYID | tail -n 1 | cut -f2`

projectDIR=''
runDIR=''
cd $LSCRATCH

echo "starting overlap"
###promoter and 3' end is similar to gene body
### coordinates files were created by grc38 gene annotation file downloaded from encode
bedtools intersect -a promoter.similar.length.to.gene.TSS.bed -b ${projectDIR}${rawnormfile} -wao > overlap.${fName}.promoter.txt

bedtools intersect -a TSS.true.gene.body.bed -b ${projectDIR}${rawnormfile} -wao >  overlap.${fName}.gene.txt

bedtools intersect -a TSS.3primeend.similar.length.to.gene.bed -b ${projectDIR}${rawnormfile} -wao >  overlap.${fName}.threeprime.txt

ls -l -h

#sort overlap file by gene and signal start position
sort -k4,4 -k8,8g overlap.${fName}.promoter.txt > overlap.promoter.${fName}.sort.txt
sort -k4,4 -k8,8g overlap.${fName}.gene.txt > overlap.tgbody.${fName}.sort.txt
sort -k4,4 -k8,8g overlap.${fName}.threeprime.txt > overlap.threeprime.${fName}.sort.txt
#### the file names are mentioned as gene body but note that the script took gff file for promoter so the files are for promoter. at the end it will change the name to promoter.
#### for the easiness I did not change the file name in the middle of the process

#normalize gene body size to 8000
blocksize=8000
awk -v block="$blocksize" -v OFS="\t" '{if(NR==1){length_of_region=($11*block/($3-$2)) ;remainder = length_of_region%1; gene=$4; current_length =length_of_region +current_length; start_pos = 1; end_position=current_length; printf $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"; printf "%.2f\t",start_pos; printf "%.2f\t",end_position; printf "\t"$10"\n"} 
else{
if(gene!=$4){length_of_region=($11*block/($3-$2)) ;gene=$4; remainder = length_of_region%1; current_length =length_of_region; start_pos = 1; end_position=current_length; printf $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"; printf "%.2f\t",start_pos; printf "%.2f\t",end_position; printf "\t"$10"\n" } 
else 
{length_of_region=($11*block/($3-$2)) ; current_length =length_of_region +current_length; start_pos = end_position ; end_position=current_length; remainder = (length_of_region%1)+(remainder%1); printf $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"; printf "%.2f\t",start_pos; printf "%.2f\t",end_position; printf "\t"$10"\n" }}}' overlap.tgbody.${fName}.sort.txt | awk -v OFS="\t" '{print $1,$2,$3,$4,$5,$6,$7,int($8),int($9),$10,(int($9)-int($8))}' | awk -v OFS="\t" 'BEGIN{i=0;sum=0;}{if($8==$9){i=i+1; sum=sum+$10; } else{if($11>2){print $0} else{print $1,$2,$3,$4,$5,$6,$7,$8,$9,((sum+$10)/(i+1)),$11} sum=0;i=0 }}' | awk -v OFS="\t" '{if(NR==1){gene=$4; print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,($11+1)} else{if(gene!=$4){gene=$4; print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,($11+1)} else{print $0; gene=$4}}}' > norm.genebody.overlap.${fName}.txt

awk -v block="$blocksize" -v OFS="\t" '{if(NR==1){length_of_region=($11*block/($3-$2)) ;remainder = length_of_region%1; gene=$4; current_length =length_of_region +current_length; start_pos = 1; end_position=current_length; printf $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"; printf "%.2f\t",start_pos; printf "%.2f\t",end_position; printf "\t"$10"\n"} 
else{
if(gene!=$4){length_of_region=($11*block/($3-$2)) ;gene=$4; remainder = length_of_region%1; current_length =length_of_region; start_pos = 1; end_position=current_length; printf $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"; printf "%.2f\t",start_pos; printf "%.2f\t",end_position; printf "\t"$10"\n" } 
else 
{length_of_region=($11*block/($3-$2)) ; current_length =length_of_region +current_length; start_pos = end_position ; end_position=current_length; remainder = (length_of_region%1)+(remainder%1); printf $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"; printf "%.2f\t",start_pos; printf "%.2f\t",end_position; printf "\t"$10"\n" }}}' overlap.promoter.${fName}.sort.txt | awk -v OFS="\t" '{print $1,$2,$3,$4,$5,$6,$7,int($8),int($9),$10,(int($9)-int($8))}' | awk -v OFS="\t" 'BEGIN{i=0;sum=0;}{if($8==$9){i=i+1; sum=sum+$10; } else{if($11>2){print $0} else{print $1,$2,$3,$4,$5,$6,$7,$8,$9,((sum+$10)/(i+1)),$11} sum=0;i=0 }}' | awk -v OFS="\t" '{if(NR==1){gene=$4; print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,($11+1)} else{if(gene!=$4){gene=$4; print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,($11+1)} else{print $0; gene=$4}}}' > norm.promoter.overlap.${fName}.txt

awk -v block="$blocksize" -v OFS="\t" '{if(NR==1){length_of_region=($11*block/($3-$2)) ;remainder = length_of_region%1; gene=$4; current_length =length_of_region +current_length; start_pos = 1; end_position=current_length; printf $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"; printf "%.2f\t",start_pos; printf "%.2f\t",end_position; printf "\t"$10"\n"} 
else{
if(gene!=$4){length_of_region=($11*block/($3-$2)) ;gene=$4; remainder = length_of_region%1; current_length =length_of_region; start_pos = 1; end_position=current_length; printf $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"; printf "%.2f\t",start_pos; printf "%.2f\t",end_position; printf "\t"$10"\n" } 
else 
{length_of_region=($11*block/($3-$2)) ; current_length =length_of_region +current_length; start_pos = end_position ; end_position=current_length; remainder = (length_of_region%1)+(remainder%1); printf $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"; printf "%.2f\t",start_pos; printf "%.2f\t",end_position; printf "\t"$10"\n" }}}' overlap.threeprime.${fName}.sort.txt | awk -v OFS="\t" '{print $1,$2,$3,$4,$5,$6,$7,int($8),int($9),$10,(int($9)-int($8))}' | awk -v OFS="\t" 'BEGIN{i=0;sum=0;}{if($8==$9){i=i+1; sum=sum+$10; } else{if($11>2){print $0} else{print $1,$2,$3,$4,$5,$6,$7,$8,$9,((sum+$10)/(i+1)),$11} sum=0;i=0 }}' | awk -v OFS="\t" '{if(NR==1){gene=$4; print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,($11+1)} else{if(gene!=$4){gene=$4; print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,($11+1)} else{print $0; gene=$4}}}' > norm.threeprime.overlap.${fName}.txt

##########################################################################################################################################

awk 'BEGIN{ORS="";index2=1; frsize=8000;endbefore=0; gene=""; strand="" } {if($11>0){if(NR==1){endbefore=$9; gene=$4; strand=$6; pwidth=$11; index2=index2+pwidth; for(i=1;i<=pwidth;i++){print $10"\t" }} else{if(index2<=frsize && endbefore==$8 && gene==$4){endbefore=$9; gene=$4; strand=$6; pwidth=$11; index2=index2+pwidth; for(i=1;i<=pwidth;i++){print $10"\t" }} else{ endbefore=$9; index2=1; pwidth=$11; index2=index2+pwidth; print gene"\t"strand"\n"; gene=$4; strand=$6; for(i=1;i<=pwidth;i++){print $10"\t" } }}}}' norm.genebody.overlap.${fName}.txt | awk -F "\t" '{if(NF == 8002){print}}' > overlap.${fName}.gene.b4strand.txt



awk 'BEGIN{ORS="";index2=1; frsize=8000;endbefore=0; gene=""; strand="" } {if($11>0){if(NR==1){endbefore=$9; gene=$4; strand=$6; pwidth=$11; index2=index2+pwidth; for(i=1;i<=pwidth;i++){print $10"\t" }} else{if(index2<=frsize && endbefore==$8 && gene==$4){endbefore=$9; gene=$4; strand=$6; pwidth=$11; index2=index2+pwidth; for(i=1;i<=pwidth;i++){print $10"\t" }} else{ endbefore=$9; index2=1; pwidth=$11; index2=index2+pwidth; print gene"\t"strand"\n"; gene=$4; strand=$6; for(i=1;i<=pwidth;i++){print $10"\t" } }}}}' norm.promoter.overlap.${fName}.txt | awk -F "\t" '{if(NF == 8002){print}}' > overlap.${fName}.promoter.b4strand.txt



awk 'BEGIN{ORS="";index2=1; frsize=8000;endbefore=0; gene=""; strand="" } {if($11>0){if(NR==1){endbefore=$9; gene=$4; strand=$6; pwidth=$11; index2=index2+pwidth; for(i=1;i<=pwidth;i++){print $10"\t" }} else{if(index2<=frsize && endbefore==$8 && gene==$4){endbefore=$9; gene=$4; strand=$6; pwidth=$11; index2=index2+pwidth; for(i=1;i<=pwidth;i++){print $10"\t" }} else{ endbefore=$9; index2=1; pwidth=$11; index2=index2+pwidth; print gene"\t"strand"\n"; gene=$4; strand=$6; for(i=1;i<=pwidth;i++){print $10"\t" } }}}}' norm.threeprime.overlap.${fName}.txt | awk -F "\t" '{if(NF == 8002){print}}' > overlap.${fName}.threeprime.b4strand.txt



###################################################################################################################################


ls -l -h
 #create the gene list
 awk '{print $8001,NR}' overlap.${fName}.promoter.b4strand.txt > gene.list.promoter.txt
 awk '{print $8001,NR}' overlap.${fName}.gene.b4strand.txt > gene.list.gene.txt
 awk '{print $8001,NR}' overlap.${fName}.threeprime.b4strand.txt > gene.list.threeprime.txt

ls -l -h
  #compare the genes (no need to sort - check number of columns is 8003 and remove others
  #promoter with body
 awk 'NR==FNR {order[$1] = $2; next} {print $0,order[$8001]}' gene.list.promoter.txt overlap.${fName}.gene.b4strand.txt |  awk '{if(NF==8003){$NF=""; print $0}}'> overlap.${fName}.gene.b4strand.comp.temp.txt
 #body with promoter
 awk 'NR==FNR {order[$1] = $2; next} {print $0,order[$8001]}' gene.list.gene.txt overlap.${fName}.promoter.b4strand.txt |  awk '{if(NF==8003){$NF=""; print $0}}'> overlap.${fName}.promoter.b4strand.comp.temp.txt
 
 #promoter with 3 prime (use this)
  awk 'NR==FNR {order[$1] = $2; next} {print $0,order[$8001]}' gene.list.threeprime.txt overlap.${fName}.promoter.b4strand.comp.temp.txt |  awk '{if(NF==8003){$NF=""; print $0}}'> overlap.${fName}.promoter.b4strand.comp.txt
  
   #body with 3 prime (use this)
  awk 'NR==FNR {order[$1] = $2; next} {print $0,order[$8001]}' gene.list.threeprime.txt overlap.${fName}.gene.b4strand.comp.temp.txt |  awk '{if(NF==8003){$NF=""; print $0}}'> overlap.${fName}.gene.b4strand.comp.txt
  
  ##3 prime with promoter 
  awk 'NR==FNR {order[$1] = $2; next} {print $0,order[$8001]}' gene.list.promoter.txt overlap.${fName}.threeprime.b4strand.txt |  awk '{if(NF==8003){$NF=""; print $0}}'> overlap.${fName}.threeprime.b4strand.comp.temp.txt
  
  ##3 prime with body (use this)
  awk 'NR==FNR {order[$1] = $2; next} {print $0,order[$8001]}' gene.list.gene.txt overlap.${fName}.threeprime.b4strand.comp.temp.txt |  awk '{if(NF==8003){$NF=""; print $0}}'> overlap.${fName}.threeprime.b4strand.comp.txt
 
ls -l -h


########################################################################################################################################


 awk -v OFS="\t" '{ if($8002=="+"){$NF=""; print $0} else if($8002=="-"){for(i=8000;i>=1;i--){ printf $i"\t"}printf $8001"\t\n"}}' overlap.${fName}.promoter.b4strand.comp.txt | awk 'BEGIN{ORS="";sum=0;} {for(i=1;i<=8000;i++){ if((i % 10)==0){printf (sum/10)"\t"; sum=0} else{sum=sum + $i }} printf $8001"\n"}' | awk '{for(i=1;i<=800;i++){printf ($i+0.0001)"\t"} printf $801"\n"}' > col10average.${fName}.promoter.txt

 
 awk -v OFS="\t" '{ if($8002=="+"){$NF=""; print $0} else if($8002=="-"){for(i=8000;i>=1;i--){ printf $i"\t"}printf $8001"\t\n"}}' overlap.${fName}.gene.b4strand.comp.txt | awk 'BEGIN{ORS="";sum=0;} {for(i=1;i<=8000;i++){ if((i % 10)==0){printf (sum/10)"\t"; sum=0} else{sum=sum + $i }} printf $8001"\n"}' | awk '{for(i=1;i<=800;i++){printf ($i+0.0001)"\t"} printf $801"\n"}' > col10average.${fName}.gene.txt
 
 awk -v OFS="\t" '{ if($8002=="+"){$NF=""; print $0} else if($8002=="-"){for(i=8000;i>=1;i--){ printf $i"\t"}printf $8001"\t\n"}}' overlap.${fName}.threeprime.b4strand.comp.txt | awk 'BEGIN{ORS="";sum=0;} {for(i=1;i<=8000;i++){ if((i % 10)==0){printf (sum/10)"\t"; sum=0} else{sum=sum + $i }} printf $8001"\n"}' | awk '{for(i=1;i<=800;i++){printf ($i+0.0001)"\t"} printf $801"\n"}' > col10average.${fName}.threeprime.txt
 
 
ls -l -h
awk 'NR==FNR {order[$1] = $2; next} {print $0,order[$801]}' ${projectDIR}hist/gene.list.txt col10average.${fName}.promoter.txt |  awk '{if(NF==802){print $0}}' | sort -k802,802g | awk -v OFS="\t" '{if(NF==802){$NF=""; print $0}}' | awk '{if(NR %100 ==0){for(i=1;i<=800;i++){arr[i]=arr[i]+$i; printf arr[i]/100"\t"; arr[i]=0;}printf "\n"}else{for(i=1;i<=800;i++){arr[i]=arr[i]+$i}}}' > promoter.final.${fName}.txt
awk 'NR==FNR {order[$1] = $2; next} {print $0,order[$801]}' ${projectDIR}hist/gene.list.txt col10average.${fName}.gene.txt |  awk '{if(NF==802){print $0}}' | sort -k802,802g | awk -v OFS="\t" '{if(NF==802){$NF=""; print $0}}' | awk '{if(NR %100 ==0){for(i=1;i<=800;i++){arr[i]=arr[i]+$i; printf arr[i]/100"\t"; arr[i]=0;}printf "\n"}else{for(i=1;i<=800;i++){arr[i]=arr[i]+$i}}}' > genebody.final.${fName}.txt
awk 'NR==FNR {order[$1] = $2; next} {print $0,order[$801]}' ${projectDIR}hist/gene.list.txt col10average.${fName}.threeprime.txt |  awk '{if(NF==802){print $0}}' | sort -k802,802g | awk -v OFS="\t" '{if(NF==802){$NF=""; print $0}}' | awk '{if(NR %100 ==0){for(i=1;i<=800;i++){arr[i]=arr[i]+$i; printf arr[i]/100"\t"; arr[i]=0;}printf "\n"}else{for(i=1;i<=800;i++){arr[i]=arr[i]+$i}}}' > threeprime.final.${fName}.txt

ls -l -h
cp promoter.final.${fName}.txt ${runDIR}
cp genebody.final.${fName}.txt ${runDIR}
cp threeprime.final.${fName}.txt ${runDIR}
