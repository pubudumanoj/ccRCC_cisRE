#!/bin/bash
#PBS -l nodes=1:ppn=4,pmem=8gb
#PBS -l walltime=1:15:00
#PBS -A czx-944-aa
#PBS -o chip.diff.norm.H3K27ac_out.txt
#PBS -e chip.diff.norm.H3K27ac_err.txt
#PBS -N chip_diffH3K27ac
#PBS -V
#PBS -t 1,3,5,7

echo "define varibales"
table="H3K27ac.bdg.diff.table.txt"
#other files 
#
#H3K4me1.bdg.diff.table.txt
#H3K4me3.bdg.diff.table.txt
rawnormfile=`cat $table | head -n $PBS_ARRAYID | tail -n 1 | cut -f1`
rawnormfileT=`cat $table | head -n $(($PBS_ARRAYID+1)) | tail -n 1 | cut -f1`

fName=`cat $table | head -n $PBS_ARRAYID | tail -n 1 | cut -f2`
fNameT=`cat $table | head -n $(($PBS_ARRAYID+1)) | tail -n 1 | cut -f2`

projectDIR=''
runDIR=''
cd $LSCRATCH

echo "starting overlap"
bedtools intersect -a ${projectDIR}hist/TSS.bed -b ${projectDIR}${rawnormfile} -wao > overlap.${fName}.txt
bedtools intersect -a ${projectDIR}hist/TSS.bed -b ${projectDIR}${rawnormfileT} -wao > overlap.${fNameT}.txt

#sorted overlap file first by gene name and then start position of the signal
#depend on few assumptions
#bed file is continuous
#last position in the previosu line is equal to start position of the current line if it is in the same gene
ls -l -h
sort -k4,4 -k8,8g overlap.${fName}.txt | awk 'BEGIN{ORS="";index2=1; frsize=8000;endbefore=0; gene=""; strand="" } {if($11>0){if(NR==1){endbefore=$9; gene=$4; strand=$6; pwidth=$11; index2=index2+pwidth; for(i=1;i<=pwidth;i++){print $10"\t" }} else{if(index2<=frsize && endbefore==$8 && gene==$4){endbefore=$9; gene=$4; strand=$6; pwidth=$11; index2=index2+pwidth; for(i=1;i<=pwidth;i++){print $10"\t" }} else{ endbefore=$9; index2=1; pwidth=$11; index2=index2+pwidth; print gene"\t"strand"\n"; gene=$4; strand=$6; for(i=1;i<=pwidth;i++){print $10"\t" } }}}}' | awk -F "\t" '{if(NF == 8002){print}}' | awk -v OFS="\t" '{ if($8002=="+"){$NF=""; print $0} else if($8002=="-"){for(i=8000;i>=1;i--){ printf $i"\t"}printf $8001"\t\n"}}' | awk 'BEGIN{ORS="";sum=0;} {for(i=1;i<=8000;i++){ if((i % 10)==0){printf (sum/10)"\t"; sum=0} else{sum=sum + $i }} printf $8001"\n"}' | awk '{for(i=1;i<=800;i++){printf ($i+0.0001)"\t"} printf $801"\n"}' > reducecol10time.${fName}.txt

#count the values across the matrix
#matsum=$(awk 'BEGIN{a=0;}{for(i=1;i<=800;i++){a=a+$i}} END{print a}' reducecol10time.${fName}.txt)
#divide all the values by sum
#awk -v matsum="$matsum" '{for(i=1;i<=800;i++){printf ($i/matsum)"\t"} printf $801"\n"}' reducecol10time.${fName}.txt > reducecol10time.${fName}.rownorm.txt

#normalize by column sum
awk '{for(i=1;i<=800;i++){colsum[i]=$i+colsum[i]}} END{for(i=1;i<=800;i++){printf colsum[i]"\t"}}' reducecol10time.${fName}.txt > colsum.${fName}.txt

awk 'NR==FNR {for(i=1;i<=800;i++){colmsum[i]=$i}next} {for (i=1;i<=800;i++) {printf ($i/colmsum[i])"\t"} printf $801"\n"}' colsum.${fName}.txt reducecol10time.${fName}.txt > reducecol10time.${fName}.norm.txt

sort -k4,4 -k8,8g overlap.${fNameT}.txt | awk 'BEGIN{ORS="";index2=1; frsize=8000;endbefore=0; gene=""; strand="" } {if($11>0){if(NR==1){endbefore=$9; gene=$4; strand=$6; pwidth=$11; index2=index2+pwidth; for(i=1;i<=pwidth;i++){print $10"\t" }} else{if(index2<=frsize && endbefore==$8 && gene==$4){endbefore=$9; gene=$4; strand=$6; pwidth=$11; index2=index2+pwidth; for(i=1;i<=pwidth;i++){print $10"\t" }} else{ endbefore=$9; index2=1; pwidth=$11; index2=index2+pwidth; print gene"\t"strand"\n"; gene=$4; strand=$6; for(i=1;i<=pwidth;i++){print $10"\t" } }}}}' | awk -F "\t" '{if(NF == 8002){print}}' | awk -v OFS="\t" '{ if($8002=="+"){$NF=""; print $0} else if($8002=="-"){for(i=8000;i>=1;i--){ printf $i"\t"}printf $8001"\t\n"}}' | awk 'BEGIN{ORS="";sum=0;} {for(i=1;i<=8000;i++){ if((i % 10)==0){printf (sum/10)"\t"; sum=0} else{sum=sum + $i }} printf $8001"\n"}' | awk '{for(i=1;i<=800;i++){printf ($i+0.0001)"\t"} printf $801"\n"}' > reducecol10time.${fNameT}.txt

#count the values across the matrix
#matsum=$(awk 'BEGIN{a=0;}{for(i=1;i<=800;i++){a=a+$i}} END{print a}' reducecol10time.${fNameT}.txt)
#divide all the values by sum
#awk -v matsum="$matsum" '{for(i=1;i<=800;i++){printf ($i/matsum)"\t"} printf $801"\n"}' reducecol10time.${fNameT}.txt > reducecol10time.${fNameT}.rownorm.txt
ls -l -h

#normalize by column sum
awk '{for(i=1;i<=800;i++){colsum[i]=$i+colsum[i]}} END{for(i=1;i<=800;i++){printf colsum[i]"\t"}}' reducecol10time.${fNameT}.txt > colsum.${fNameT}.txt

awk 'NR==FNR {for(i=1;i<=800;i++){colmsum[i]=$i}next} {for (i=1;i<=800;i++) {printf ($i/colmsum[i])"\t"} printf $801"\n"}' colsum.${fNameT}.txt reducecol10time.${fNameT}.txt > reducecol10time.${fNameT}.norm.txt
echo $matsum

#add pseudo count and T/N 
awk 'NR==FNR {for(i=1;i<=800;i++){arr[$801,i]=($i)} next} {for(i=1;i<=800;i++){if(arr[$801,i]!=0){printf ($i/arr[$801,i])"\t"}} printf $801"\n"}' reducecol10time.${fName}.norm.txt reducecol10time.${fNameT}.norm.txt > diff.${fName}.txt

#order by log2foldchange
awk 'NR==FNR {order[$1] = $2; next} {print $0,order[$801]}' ${projectDIR}hist/gene.order.by.lg2fc.filtered.txt diff.${fName}.txt | sort -k802,802g | awk -v OFS="\t" '{if(NF==802){$NF=""; print $0}}' > ordered.peak.${fName}.txt

ls -l -h

#find the gene list used in this specific sample
awk 'BEGIN{} {if(NR==1){printf "gene\torder\n"; printf $801"\t"NR"\n"} else{printf $801"\t"NR"\n"} }' ordered.peak.${fName}.txt > ordered.peak.${fName}.gene.order.Rmerge.txt

#transformed to log and summarize by 100 rows and get the final matrix
awk '{for(i=1;i<=800;i++){printf (log($i)/log(10))"\t"} printf "\n"}' ordered.peak.${fName}.txt | awk '{if(NR %100 ==0){for(i=1;i<=800;i++){arr[i]=arr[i]+$i; printf arr[i]/100"\t"; arr[i]=0;}printf "\n"}else{for(i=1;i<=800;i++){arr[i]=arr[i]+$i}}}' > finalmatrix.${fName}.diff.cn.txt

#copy files in to the working directory
cp finalmatrix.${fName}.diff.cn.txt ${runDIR}
cp ordered.peak.${fName}.gene.order.Rmerge.txt ${runDIR}ordered.peak.${fName}.gene.order.Rmerge.cn.txt